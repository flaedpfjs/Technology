## 范例6-1：在test命令中使用-f选项（文件存在且为普通文件则表达式成立）测试文件

[root@oldboy ～]# test -f file && echo true || echo false  #＜==如果file文件存在并且是普通文件就为真，因为file文件不存在，所以输出了false。
false

[root@oldboy ～]# touch file        #＜==现在创建不存在的普通文件file。

[root@oldboy ～]# test -f file && echo true || echo false   #＜==因为file文件存在，所以输出了true。
true

================================================================================================================

## 范例6-2：在test命令中使用-z选项（如果测试字符串的长度为0，则表达式成立）测试字符串

[root@oldboy ～]# test -z "oldboy" && echo 1 || echo 0   #＜==如果测试字符串的长度为0，则表达式成立，因为被测试的字符串为oldboy，不为0，表达式结果为假，因此返回0。
0

[root@oldboy ～]# char="oldboy"     #＜==将oldboy字符串赋值给变量char。

[root@oldboy ～]# test -z "$char" && echo 1 || echo 0 #＜==对变量char进行测试，注意要带$。
0

[root@oldboy ～]# char=""        #＜==将空值赋值给变量char。

[root@oldboy ～]# test -z "$char" && echo 1 || echo 0   #＜==如果测试字符串的长度为0，则表达式成立，因为被测试的字符串为空，因此表达式的结果为真，返回1。
1

####提示：关于test测试表达式的更多知识可执行man test查看帮助，本书大部分场景都会使用[]的语法替代test命令的语法。

================================================================================================================

###范例6-3：利用[]加-f选项（文件存在且为普通文件则表达式成立）测试文件

[root@oldboy ～]# [ -f /tmp/oldboy.txt ] && echo 1 || echo 0   #＜==如果/tmp/oldboy.txt文件存在并且是普通文件则为真，因为该文件不存在，所以输出了0。
0

[root@oldboy ～]# touch /tmp/oldboy.txt       #＜==创建文件。

[root@oldboy ～]# [ -f /tmp/oldboy.txt ] && echo 1 || echo 0
1      #＜==因为文件存在，所以输出1。

[root@oldboy ～]# [ -f /tmp/oldboy.txt ] && echo 1  #＜==可以只写前一半（即只有&&部分），如果文件存在则输出1。
1

[root@oldboy ～]# [ -f /tmp/oldboy.txt ] || echo 0   #＜==可以只写后一半（即只有||部分），如果文件不存在则输出0，因为文件存在，所以没有输出。

[root@oldboy ～]# [ -f /tmp/oldgirl.txt ] || echo 0  #＜==如果文件不存在，则输出0，因为oldgirl.txt不存在，所以输出了0。
0

================================================================================================================

## 范例6-4:[[]]的使用示例

[root@oldboy ～]# [[ -f /tmp/oldgirl.txt ]] || echo 0    #＜==如果/tmp/oldgirl.txt文件存在并且是普通文件，则为真，因为文件不存在，所以输出了0。
0
[root@oldboy ～]# touch /tmp/oldgirl.txt     #＜==创建oldgirl.txt，注意/tmp目录。

[root@oldboy ～]# [[ -f /tmp/oldgirl.txt ]] || echo 0 #＜==因为文件存在了，所以后半部分没有输出。

[root@oldboy ～]# [[ -f /tmp/oldboy.txt ]] || echo 0 #＜==因为存在/tmp/oldboy.txt，所以后半部分没有输出。

[root@oldboy ～]# rm -f /tmp/oldboy.txt              #＜==删除oldboy.txt文件。

[root@oldboy ～]# [[ -f /tmp/oldboy.txt ]] || echo 0 #＜==因为文件不存在了，所以输出0。
0

================================================================================================================

##范例6-5：普通文件条件表达式测试实践

[root@oldboy ～]# touch oldboy  #＜==创建文件oldboy。

[root@oldboy ～]# ls -l oldboy
-rw-r--r-- 1 root root 0 Aug   9 22:40 oldboy

[root@oldboy ～]# [ -f oldboy ] && echo 1 || echo 0 #＜==测试文件是否存在，如果存在，则输出1，否则输出0
1  #＜==因为刚刚创建了oldboy文件，因此条件测试表达式成立，输出1。

================================================================================================================

## 范例6-6：目录文件条件表达式测试实践

[root@oldboy ～]# mkdir oldgirl  #＜==创建目录oldgirl。

[root@oldboy ～]# [ -f oldgirl ] && echo 1 || echo 0      #＜==测试oldgirl是否为普通文件。
0      #＜==输出为0，证明oldgirl非普通文件，因为前面创建的是oldgirl目录，因此，输出0是对的。

[root@oldboy ～]# [ -e oldgirl ] && echo 1 || echo 0    #＜==测试oldgirl是否存在。
1  #＜==只要oldgirl存在就行，不管是目录还是普通文件，oldgirl确实存在，因此输出1。

[root@oldboy ～]# [ -d oldgirl ] && echo 1 || echo 0 #＜==测试oldgirl是否为目录。
1  #＜==输出1，证明oldgirl是目录。

[root@oldboy ～]# [ -d oldboy ] && echo 1 || echo 0 #＜==测试oldboy是否为目录。
0  #＜==输出0，证明oldboy非目录

================================================================================================================

##范例6-7：文件属性条件表达式测试实践
[root@oldboy ～]# ls -l oldboy
-rw-r--r-- 1 root root 0 Aug   9 22:40 oldboy  #＜==文件权限默认为644，权限基础可参考老男孩基础类图书或视频讲解。

[root@oldboy ～]# [ -r oldboy ] && echo 1 || echo 0  #＜==测试oldboy是否可读。
1    #＜==输出为1，因为用户权限位有r，因此，可以读取oldboy。

[root@oldboy ～]# [ -w oldboy ] && echo 1 || echo 0  #＜==测试oldboy是否可写。
1  #＜==输出为1，因为用户权限位有w，因此，可以写入oldboy。

[root@oldboy ～]# [ -x oldboy ] && echo 1 || echo 0  #＜==测试oldboy是否可执行。
0  #＜==输出为0，因为用户权限位没有x，因此，不可以执行oldboy。

[root@oldboy ～]# chmod 001 oldboy  #＜==修改oldboy的权限位001。

[root@oldboy ～]# ls -l oldboy
---------x 1 root root 0 Aug  9 22:40 oldboy #＜==修改后的结果。

[root@oldboy ～]# [ -w oldboy ] && echo 1 || echo 0
1  #＜==用户权限位明明没有w，为什么还是返回1呢？

[root@oldboy ～]# echo 'echo test' ＞oldboy  #＜==因为确实可以写啊，这是root用户比较特殊的地方。

[root@oldboy ～]# [ -r oldboy ] && echo 1 || echo 0
1  #＜==用户权限位明明没有r，为什么还是返回1呢？

[root@oldboy ～]# cat oldboy
echo test  #＜==因为确实可以读啊，这是root用户比较特殊的地方。

[root@oldboy ～]# [ -x oldboy ] && echo 1 || echo 0
1

[root@oldboy ～]# ./oldboy    #＜==可执行。
test

####提示：测试文件的读、写、执行等属性，不光是根据文件属性rwx的标识来判断，还要看当前执行测试的用户是否真的可以按照对应的权限操作该文件。

================================================================================================================

##首先定义file1和file2两个变量，并分别赋予这两个变量对应的系统文件路径及文件名的值，如下：

[root@oldboy ～]# file1=/etc/services; file2=/etc/rc.local  #＜==分号用于分隔两个命令。

[root@oldboy ～]# echo $file1 $file2
/etc/services /etc/rc.local

##范例6-8：对单个文件变量进行测试

#-d:文件存在且为目录则为真  -f:文件存在且为普通文件则为真 -s:文件存在且文件大小不为0则为真 -e:文件存在则为真

[root@oldboy ～]# [ -f "$file1" ] && echo 1 || echo 0    #＜==文件存在且为普通文件，所以为真(1)。
1

[root@oldboy ～]# [ -d "$file1" ] && echo 1 || echo 0    #＜==是文件而不是目录，所以为假（0）。
0

[root@oldboy ～]# [ -s "$file1" ] && echo 1 || echo 0    #＜==文件存在且大小不为0，所以为真(1)。
1

[root@oldboy ～]# [ -e "$file1" ] && echo 1 || echo 0    #＜==文件存在，所以为真(1)。
1

================================================================================================================

##范例6-9：对单个目录或文件进行测试

[root@oldboy ～]# [ -e /etc ] && echo 1 || echo 0
1

[root@oldboy ～]# [ -w /etc/services ] && echo 1 || echo 0
1

[root@oldboy ～]# su - oldboy  #＜==切换到普通用户。

[oldboy@oldboy ～]$ [ -w /etc/services ] && echo 1 || echo 0 #＜==文件不可写，所以返回0。
0

================================================================================================================

##范例6-10：测试时变量的特殊写法及问题

用[]测试变量时，如果被测试的变量不加双引号，那么测试结果可能会是不正确的，示例如下：

[root@oldboy ～]# echo $oldgirl    #＜==这是一个不存在的变量，如果读者已经定义，则可以执行unset oldgirl取消。

[root@oldboy ～]# [ -f $oldgirl ] && echo 1 || echo 0     #＜==不加引号测试变量。
1           #＜==明明$oldgirl变量不存在内容还返回1，逻辑就不对了

[root@oldboy ～]# [ -f "$oldgirl" ] && echo 1 || echo 0   #＜==加引号测试变量。
0           #＜==加了双引号就返回0，逻辑就对了

##如果是文件实体路径，那么加引号与不加引号的结果是一样的：

[root@oldboy ～]# [ -f "/etc/services" ] && echo 1 || echo 0    #＜==加引号测试文件。
1

[root@oldboy ～]# [ -f /etc/services ] && echo 1 || echo 0      #＜==不加引号测试文件。
1

================================================================================================================

##范例6-11：在生产环境下，系统NFS启动脚本的条件测试。

[root@oldboy ～]# more /etc/init.d/nfs
# Source networking configuration.
[ -f /etc/sysconfig/network ] && . /etc/sysconfig/network
#＜==如果/etc/sysconfig/network文件存在，则加载文件。
# Check for and source configuration file otherwise set defaults
[ -f /etc/sysconfig/nfs ] && . /etc/sysconfig/nfs
#＜==如果/etc/sysconfig/nfs文件存在，则加载文件。

###特别提示：系统脚本是我们学习编程的第一标杆，新手要多参考脚本来学习，虽然有些脚本也不是特别规范。

================================================================================================================

##范例6-12：实现系统bind启动脚本named（bind DNS服务）

[ -r /etc/sysconfig/network ] && . /etc/sysconfig/network  #＜==若文件存在且可读，则加载/etc/sysconfig/network。
[ -x /usr/sbin/$named ] || exit 5    #＜==如果/usr/sbin/$named不可执行，则退出。

特别提示：前面所讲的都是[ -f/etc ] && echo 1 || echo 0的用法，bind启动脚本[ -x /usr/sbin/$named ] || exit 5的用法更值得注意，这里只用了一部分判断，结果却更简洁。

================================================================================================================

## 范例6-13：写出简单高效的测试文件。

在做测试判断时，不一定非要按照“前面的操作成功了如何，否则如何”的方法来进行。直接做部分判断，有时看起来更简洁。例如：

[root@oldboy ～]# [ -x oldboy ] && echo 1  #＜==如果oldboy可执行，则输出1；如果不可执行，则不做任何输出。
1

[root@oldboy ～]# [ -f /etc ] || echo 0    #＜==如果/etc是文件这一点不成立，则输出0；如果成立，则不做任何输出。
0

================================================================================================================

##范例6-14：实现系统脚本/etc/init.d/nfs。

[root@oldboy ～]# sed -n '44,50p' /etc/init.d/nfs  #＜==查看NFS脚本的第44～50行。
# Check that networking is up.
[ "${NETWORKING}" ! = "yes" ] && exit 6   #＜==如果${NETWORKING}的变量内容不等于yes，则退出。
[ -x /usr/sbin/rpc.nfsd ] || exit 5  #＜== 如果/usr/sbin/rpc.nfsd的脚本不可执行，则以返回值5退出脚本。如果可执行，则不做任何输出。
[ -x /usr/sbin/rpc.mountd ] || exit 5
[ -x /usr/sbin/exportfs ] || exit 5

================================================================================================================

##范例6-15：当条件不成立时，执行大括号里的多条命令，这里要使用逻辑操作符“||”。

[root@oldboy scripts]# cat 6_15.sh
[ -f /etc ] || {        #＜==如果/etc/是普通文件不成立，则执行大括号里的命令集合，这显然不成立啊！
    echo 1
    echo 2
    echo 3
}

[root@oldboy scripts]# sh 6_15.sh  #＜==/etc/是普通文件显然是不成立的，因此会执行大括号里的命令集！
1
2
3

##如果把上述脚本写在一行里面，那么里面的每个命令都需要用分号结尾，示例如下所示：

[root@oldboy ～]# [ -f /etc/services ] && { echo "I am oldboy"; echo "I am linuxer"; }
I am oldboy
I am linuxer

================================================================================================================



================================================================================================================



================================================================================================================



================================================================================================================



================================================================================================================



================================================================================================================
