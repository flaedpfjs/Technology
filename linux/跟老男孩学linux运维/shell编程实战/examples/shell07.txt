
##范例5-1:利用(())进行简单数值计算

shiyufeng:examples shiyufeng$ echo $((1+1))  #计算1+1后输出
2

shiyufeng:examples shiyufeng$ echo $((6-3))  #计算6-3后输出
3

shiyufeng:examples shiyufeng$ ((i=5))
shiyufeng:examples shiyufeng$ ((i=i*2))   #获取i值，然后计算i*2，再赋值给i，此时没有输出
shiyufeng:examples shiyufeng$ echo $i     #输出时用echo,而且要加$
10

================================================================================================================

##范例5-2：利用“(())”进行稍微复杂一些的综合算术运算。＊＊表示幂运算

[root@oldboy ～]# ((a=1+2＊＊3-4%3)) #＜==这是一个较复杂的表达式运算并赋值的操作，表达式运算后将结果赋值给a，先乘除后加减。

[root@oldboy ～]# echo $a
8      #＜==运算后输出结果为8。

[root@oldboy ～]# b=$((1+2＊＊3-4%3))    #＜==这是另外一种表达式运算后将结果赋值给变量的写法，变量放在了括号的外面。

[root@oldboy ～]# echo $b
8

[root@oldboy ～]# echo $((1+2＊＊3-4%3))  #＜==还可以直接运算表达式并将结果输出，注意不要落下了$符。
8

[root@oldboy ～]# a=$((100＊(100+1)/2))   #＜==利用公式计算1+2+3+...+100的和。

[root@oldboy ～]# echo $a
5050

[root@oldboy ～]# echo $((100＊(100+1)/2))   #＜==直接输出表达式的结果。
5050

================================================================================================================

##范例5-3：特殊运算符号的运算小示例。

[root@oldboy ～]# a=8

[root@oldboy ～]# echo $((a=a+1)) #＜==将a+1赋值给a，然后输出表达式的值。
9

[root@oldboy ～]# echo $((a+=1))    #＜==相当于a=a+1。
10

[root@oldboy ～]# echo $((a＊＊2))  #＜==计算a的平方，＊＊表示幂运算。
100

================================================================================================================

##范例5-4：利用“(())”双括号进行比较及判断。

[root@oldboy ～]# echo $((3＜8))      #＜==3＜8的结果是成立的，因此，输出了1,1表示真。
1  #＜==输出1说明上述表达式的结果是对的。

[root@oldboy ～]# echo $((8＜3))      #＜==8＜3的结果是不成立的，因此，输出了0,0表示假。
0  #＜==输出0说明上述表达式的结果是错的。

[root@oldboy ～]# echo $((8==8))     #＜==判断是否相等。
1

[root@oldboy ～]# if ((8＞7&&5==5))  #＜==如果8＞7成立并且5==5成立，则打印yes。显然这两个条件都成立。
＞ then                               #＜==这是一个简单的命令行if语句格式。
＞ echo yes
＞ fi
yes                                   #＜==因此结果输出了yes。

####提示：上面涉及的数字及变量必须为整数（整型），不能是小数（浮点数）或字符串。后面的bc和awk命令可以用于进行小数（浮点数）运算，但一般用到的较少，下文对此还会讲解。

================================================================================================================

##范例5-5：在变量前后使用--和++特殊运算符的表达式。

[root@oldboy ～]# a=10

[root@oldboy ～]# echo $((a++))   #＜== 如果a在运算符(++或--)的前面，那么在输出整个表达式时，会输出a的值，因为a为10，所以表达式的值为10。
10

[root@oldboy ～]# echo $a    #＜==执行上面的表达式后，因为有a++，因此a会自增1，因此输出a的值为11。
11

[root@oldboy ～]# a=11

[root@oldboy ～]# echo $((a--))   ＜== 如果a在运算符(++或--)的前面，那么在输出整个表达式时，会输出a的值，因为a为11，所以表达式的值的为11。
11

[root@oldboy ～]# echo $a      #＜==执行上面的表达式后，因为有a--，因此a会自动减1，因此a为10。
10

[root@oldboy ～]# a=10

[root@oldboy ～]# echo $a
10

[root@oldboy ～]# echo $((--a))   #＜== 如果a在运算符(++或--)的后面，那么在输出整个表达式时，先进行自增或自减计算，因为a为10，且要自减，所以表达式的值为9。
9

[root@oldboy ～]# echo $a     #＜==执行上面的表达式后，a自减1，因此a为9。
9

[root@oldboy ～]# echo $((++a))  #＜== 如果a在运算符(++或--)的后面，输出整个表达式时，先进行自增或自减计算，因为a为9，且要自增1，所以输出10。
10

[root@oldboy ～]# echo $a   #＜==执行上面的表达式后，a自增1，因此a为10。
10

说明：

执行echo $((a++))和echo $((a--))命令输出整个表达式时，输出的值即为a的值，表达式执行完毕后，会对a进行++、--的运算，
而执行echo $((++a))和echo $((--a))命令输出整个表达式时，会先对a进行++、--的运算，然后再输出表达式的值，即为a运算后的值。

提示：有关++、--运算的记忆方法：

变量a在运算符之前，输出表达式的值为a，然后a自增或自减；变量a在运算符之后，输出表达式会先自增或自减，表达式的值就是自增或自减后a的值。
如果实在理解不了这里的++和--，跳过就可以了，不会影响读者学好Linux运维，在工作中，使用它们前先测试好结果即可

================================================================================================================

##范例5-6：通过“(())”运算后赋值给变量。

[root@oldboy ～]# myvar=99

[root@oldboy ～]# echo $((myvar+1))          #＜==“(())”中的变量myvar前也可以加$符号，也可以不加。
100

[root@oldboy ～]# echo $((  myvar + 1  ))    #＜==“(())”内部内容的两端有几个空格无所谓，变量和运算符号之间有无空格也无所谓，可以有一个或多个，也可以没有。
100

[root@oldboy ～]# myvar=$((myvar+1))         #＜==还可以在“(())”表达式前加$符号，表达式赋值给变量。

[root@oldboy ～]# echo $myvar
100

####提示：在“(())”中使用变量时可以去掉变量前的$符号。

================================================================================================================

##范例5-7：包含“(())”的各种常见运算符命令行的执行示例。

[root@oldboy ～]# echo $((6+2))   #＜==加法
8

[root@oldboy ～]# echo $((6-2))   #＜==减法
4

[root@oldboy ～]# echo $((6＊2))  #＜==乘法
12

[root@oldboy ～]# echo $((6/2))   #＜==除法，取商数
3

[root@oldboy ～]# echo $((6%2))   #＜==取模，即余数
0

[root@oldboy ～]# echo $((6＊＊2)) #＜==幂运算(6的2次方)
36

####提示：
“(())”表达式在命令行执行时不需要加$符号，直接使用((6%2))形式即可，但是如果需要输出，就要加$符，例如：echo $((6%2))。
“(())”里的所有字符之间没有空格、有一个或多个空格都不会影响结果。
================================================================================================================

##范例5-8：各种“(())”运算的Shell脚本示例。

[root@oldboy scripts]# cat test.sh
#! /bin/bash
a=6                        #＜==在脚本中定义a和b两个变量并分别赋值。
b=2
echo "a-b=$(($a-$b))"      #＜==对定义的变量值进行各种符号运算，并通过表达式的形式输出，下同。
echo "a+b=$(($a+$b))"
echo "a＊b=$(($a＊$b))"
echo "a/b=$(($a/$b))"
echo "a＊＊b=$(($a＊＊$b))"
echo "a%b=$(($a%$b))"

##建议读者手动输入一遍这个脚本，并执行看看结果。这个例子很重要，后文经常会使用到，可保留起来备用。
##其执行结果如下:

[root@oldboy scripts]# sh test.sh
a-b=4
a+b=8
a＊b=12
a/b=3
a＊＊b=36
a%b=0

================================================================================================================

##范例5-9：把范例5-8脚本中的a、b两个变量通过命令行脚本传参，以实现混合运算脚本的功能。
##这是一个考察实战编程思想的综合实践考试题，将涉及前面提到的特殊位置参数变量的知识。

####参考答案1：

[root@oldboy scripts]# cat test.sh
#! /bin/bash
a=$1    #＜==直接把特殊位置参数变量$1赋值给a，
b=$2    #＜==并且把特殊位置参数变量$2赋值给b，这样，脚本传参的内容就会赋值给a和b。
echo "a-b=$(($a-$b))"
echo "a+b=$(($a+$b))"
echo "a＊b=$(($a＊$b))"
echo "a/b=$(($a/$b))"
echo "a＊＊b=$(($a＊＊$b))"
echo "a%b=$(($a%$b))"

执行结果如下：
[root@oldboy scripts]# sh test.sh 6 2
a-b=4
a+b=8
a＊b=12
a/b=3
a＊＊b=36
a%b=0

[root@oldboy scripts]# sh test.sh 10 5
a-b=5
a+b=15
a＊b=50
a/b=2
a＊＊b=100000
a%b=0

####使用脚本传参的好处是可以进行各种数字间的运算，不像前一个脚本，因为是直接定义变量的，所以只能做6和2这两个数字的运算，
也就是说，使用传参，可以让脚本更具备通用性。

####参考答案2：
#! /bin/bash
echo "a-b =$(( $1 - $2 ))"
echo "a+b =$(( $1 + $2 ))"
echo "a＊b =$(( $1 ＊ $2 ))"
echo "a/b =$(( $1 / $2 ))"
echo "a＊＊b =$(( $1 ＊＊ $2 ))"
echo "a%b =$(( $1 % $2 ))"
================================================================================================================

##范例5-10：实现输入2个数进行加、减、乘、除功能的计算器。

参考答案1：本解答方案利用了read命令的读入功能，并对读入的内容是否为整数，传入的符号是否符合加、减、乘、除之一做了判断。
#! /bin/bash
print_usage(){                                #＜==定义一个函数，名字为print_usage。
    printf "Please enter an integer\n"        #＜==打印符合脚本要求的提示信息。
    exit 1   #＜==以返回值1退出脚本，这个在前面讲特殊进程变量时已经讲过这个返回值的用法了。
}
read -p "Please input first number: " firstnum   #＜==读入第一个数字，本章后文将讲解read。
if [ -n "`echo $firstnum|sed 's/[0-9]//g'`" ]; then  #＜==判断是否为整数，删除读入内容的数字部分看是否为空（-n功能），进而判断读入的内容是否为数字。
    print_usage       #＜==如果上述条件变量值不为空，说明不是整数，则调用用户帮助函数。
fi
read -p "Please input the operators: " operators       #＜==继续读入运算符。
if [ "${operators}" ! = "+" ]&&[ "${operators}" ! = "-" ] && [ "${operators}"
!= "＊" ] && [ "${operators}" ! = "/" ]; then #＜==判断第二个输入内容操作符是否为+-＊/任意运算符之一。
    echo "please use {+|-|＊|/}"         #＜==如果操作符不符合要求，则给出提示。
    exit 2      #＜==因为不符合要求，因此以返回值2退出脚本，表示出现错误了。
fi
read -p "Please input second number: " secondnum      #＜==读入第二个要运算的数字。
if [ -n "`echo $secondnum|sed 's/[0-9]//g'`" ]; then  #＜==同第一个运算的数字，判断是否为整数。
        print_usage #＜==如果上述条件变量值不为空，说明不是整数，则调用用户帮助函数。
    fi
    echo "${firstnum}${operators}${secondnum}=$((${firstnum}${operators}${secondnum}))" #＜==上述条件都符合后，进入运算，输出运算表达式和计算结果。

执行结果如下：
[root@oldboy scripts]# sh 05_10_jisuan.sh
Please input first number: 6    #＜==输入数字6。
Please input the operators: -   #＜==输入运算符号减号。
Please input second number: 2   #＜==输入数字2。
6-2=4

[root@oldboy scripts]# sh 05_10_jisuan.sh
Please input first number: 6
Please input the operators: ＊
Please input second number: 3
6＊3=18

[root@oldboy scripts]# sh 05_10_jisuan.sh
Please input first number: oldboy #＜==当输入非数字时，系统就会提示“请输入数字”，并终止程序运行。
Please enter an integer            #＜==提示“请输入数字”。
[root@oldboy scripts]# sh 05_10_jisuan.sh
Please input first number: 10
Please input the operators: ^      #＜==运算符号不符合+-＊/之一时，也会提示，并终止程序运行。
please use {+|-|＊|/}

##参考答案2：本解答方案利用了脚本命令行传参的功能，并对传参的内容是否为整数，传入的符号是否符合加、减、乘、除之一做了判断。

[root@oldboy scripts]# cat 05_11_jisuan.sh
#! /bin/bash
print_usage(){
    printf $"USAGE:$0 NUM1 {+|-|＊|/} NUM2\n"
    exit 1
}
if [ $# -ne 3 ] #＜==如果脚本传入的参数个数不等于3个（因为要输入两个数字及一个运算符号）。
  then
    print_usage #＜==则调用用户帮助函数。
fi
firstnum=$1  #＜==第一个数字，为了减小对原脚本的改动，这里将$1赋值给firstnum，下同。
secondnum=$3
op=$2
if [ -n "`echo $firstnum|sed 's/[0-9]//g'`" ]; then   #＜==是否为整数的判断，同上。
    print_usage
fi
if [ "$op" ! = "+" ]&&[ "$op" ! = "-" ]&&[ "$op" ! = "＊" ]&&[ "$op" ! = "/" ]
  #＜==判断第二个输入的操作符是否为+、-、＊、/任意运算符之一。
  then
    print_usage
fi
if [ -n "`echo $secondnum|sed 's/[0-9]//g'`" ]; then  #＜==是否为整数的判断，同上。
    print_usage
fi
echo "${firstnum}${op}${secondnum}=$((${firstnum}${op}${secondnum}))"

执行结果如下：
[root@oldboy scripts]# sh 05_11_jisuan.sh 6 + 2
6+2=8
[root@oldboy scripts]# sh 05_11_jisuan.sh 6 - 2
6-2=4
[root@oldboy scripts]# sh 05_11_jisuan.sh 6 \＊ 2    #＜==＊号要转义。
6＊2=12
[root@oldboy scripts]# sh 05_11_jisuan.sh 6 / 2
6/2=3
[root@oldboy scripts]# sh 05_11_jisuan.sh old / 2    #＜==若输入的参数不符合要求，则给予提示。
USAGE:05_11_jisuan.sh NUM1 {+|-|＊|/} NUM2

[root@oldboy scripts]# sh 05_11_jisuan.sh 6 / girl  #＜==若输入的参数不符合要求，则给予提示。
USAGE:05_11_jisuan.sh NUM1 {+|-|＊|/} NUM2


##参考答案3：此为高效、简单的方法，只用一个$1进行计算，传参时传一个表达式就可以了。
[root@oldboy scripts]# cat jisuan1.sh
echo $(($1))
[root@oldboy scripts]# sh jisuan1.sh 6+2
8
[root@oldboy scripts]# sh jisuan1.sh "6 + 2"  #＜==如果有空格，则要加双引号。
8
####提示：本脚本没有对输入的参数做判断。
================================================================================================================

##范例5-11：给自变量i加8

[root@oldboy scripts]# i=2
[root@oldboy scripts]# i=i+8      #＜==假如开头不用let进行赋值。
[root@oldboy scripts]# echo $i    #＜==输出时会发现，打印结果为i+8，也就是没有计算。
i+8

[root@oldboy scripts]# unset i    #清除i的值

[root@oldboy scripts]# i=2
[root@oldboy scripts]# let i=i+8   #＜==采用let赋值后再输出。
[root@oldboy scripts]# echo $i
10  #＜==结果为10

##提示：let i=i+8等同于((i=i+8))，但后者效率更高。

================================================================================================================

##范例5-12：监控Web服务状态，如果访问两次均失败，则报警（let应用案例）
##以下以简单的企业实战脚本作为参考答案（更专业更规范的企业实战脚本见后文）：

[root@oldboy scripts]# cat 05_12_checkurl.sh
CheckUrl() {      #＜==定义函数，名字为CheckUrl。
    timeout=5     #＜==定义wget访问的超时时间，超时就退出。
    fails=0       #＜==初始化访问网站失败的次数记录变量，若失败达到两次，就发邮件报警。
    success=0     #＜==初始化访问网站成功的次数记录变量，如果为1，则表示成功，退出脚本。
    while true    #＜==持续循环检测。
      do
        wget --timeout=$timeout --tries=1 http://oldboy.blog.51cto.com -q -O /dev/null   #＜==使用wget测试访问老男孩的博客地址。
        if [ $? -ne 0 ]  #＜==如果上述wget命令执行不成功，即返回值不为0，则执行if语句内的指令。
          then
            let fails=fails+1     #＜==将访问失败的次数加1，这个就是let的用法，可以用((fails=fails+1))代替。
        else
            let success+=1        #＜==返回值不为0则不成立，即访问成功，将成功的次数加1。
        fi
        if [ $success -ge 1 ]     #＜==如果成功的次数大于等于1
          then
            echo success    #＜==则打印成功标识，这也可以用冒号（:）替代，不输出结果，这是为了观察方便。
            exit 0                #＜==返回0值，退出脚本，表示检测成功。
        fi
        if [ $fails -ge 2 ]       #＜==如果失败的次数大于等于2，则报警。
          then
            Critical="sys is down."
            echo $Critical|tee|mail -s "$Critical" abc@oldboyedu.com  #＜==输出并发邮件报警，这里需要单独配你自己的邮箱地址，别用作者这里写的。
            exit 2
        fi
    done
}
CheckUrl   #＜==执行函数。

####提示：实际上wget命令有自动重试的功能，--tries=1参数就是，这里以一个脚本为大家阐述编程思想及let的应用案例。
####执行结果如下：
[root@oldboy scripts]# sh 05_12_checkurl.sh
success

[root@oldboy scripts]# sh 05_12_checkurl.sh    #＜==当无法访问地址时会输出错误。
sys is down.

[root@oldboy scripts]# sh -x 05_12_checkurl.sh #＜==使用-x可以跟踪详细的执行过程。
+ CheckUrl
+ timeout=5
+ fails=0
+ success=0
+ true
+ wget --timeout=5 --tries=1 http://oldboy.old.51cto.com -q -O /dev/null   #＜==故意搞错地址。
+ '[' 4 -ne 0 ']'    #＜==返回值不是0，因此，将失败次数加1。
+ let fails=fails+1  #＜==访问失败后次数加1。
+ '[' 0 -ge 1 ']'
+ '[' 1 -ge 2 ']'    #＜==因为没有达到两次失败，因此不报警。
+ true
+ wget --timeout=5 --tries=1 http://oldboy.old.51cto.com -q -O /dev/null   #＜==继续第2次访问。
+ '[' 4 -ne 0 ']'
+ let fails=fails+1
+ '[' 0 -ge 1 ']'
+ '[' 2 -ge 2 ']'    #＜==若达到两次失败的阈值，则启动报警装置。
+ Critical='sys is down.'
+ echo sys is down.
sys is down.
+ mail -s 'sys is down.' abc@oldboyedu.com
+ echo sys is down.
+ exit 2
================================================================================================================

##范例5-13：expr命令运算用法实践

[root@oldboy scripts]# expr 2 + 2
4

[root@oldboy scripts]# expr 2 - 2
0

[root@oldboy scripts]# expr 2 ＊ 2     #＜==＊号用\来转义。
expr： 语法错误

[root@oldboy scripts]# expr 2 \＊ 2    # *号需要用/转义
4

[root@oldboy scripts]# expr 2 / 2
1

####要注意，在使用expr时：
□运算符及用于计算的数字左右都至少有一个空格，否则会报错。
□使用乘号时，必须用反斜线屏蔽其特定含义，因为Shell可能会误解星号的含义。

================================================================================================================

##范例5-14：给自变量i加6

[root@oldboy scripts]# i=5

[root@oldboy scripts]# i=`expr $i + 6` #＜==注意用反引号将表达式引起来，变量和数字符号两边要有空格。

[root@oldboy scripts]# echo $i
11

####注意：expr在Shell中可配合变量进行计算，但需要用反引号将计算表达式括起来。

================================================================================================================

##范例5-15：通过expr判断变量或字符串是否为整数

[root@oldboy scripts]# i=5                        #＜==赋值一个数5给i。

[root@oldboy scripts]# expr $i + 6 &＞/dev/null   #＜==把i和整数相加，&＞/dev/null表示不保留任何输出。

[root@oldboy scripts]# echo $?                    #＜==输出返回值。"$?"获取执行上一个指令的执行状态返回值(0成功,非0失败)
0     #＜==返回为0，则证明i的值为整数。

[root@oldboy scripts]# i=oldboy                  #＜==此时赋值一个字符串给i。
[root@oldboy scripts]# expr $i + 6 &＞/dev/null   #＜==同样把i和整数相加，不保留任何输出。
[root@oldboy scripts]# echo $?    #＜==输出返回值。
2  #＜==返回为非0，则证明i的值不是整数，因为赋值的是oldboy

结论：利用expr做计算，将一个未知的变量和一个已知的整数相加，看返回值是否为0，如果为0就认为做加法的变量为整数，否则就不是整数。

================================================================================================================

##范例5-16：通过传参判断输出内容是否为整数

[root@oldboy scripts]# cat 05_16_expr.sh
#! /bin/sh
expr $1 + 1 ＞/dev/null 2＞&1
[ $? -eq 0 ] &&echo int||echo chars  #＜==这是一个条件表达式语法，返回值为0，则输出int，否则输出chars。

[root@oldboy scripts]# sh 05_16_expr.sh oldboy   #＜==传入oldboy字符。
chars  #＜==返回的是字符

[root@oldboy scripts]# sh 05_16_expr.sh 119      #＜==传入119。
int  #＜==返回的是数字

================================================================================================================

##范例5-17：通过read读入持续等待输入例子（此为范例5-16的加强版）

[root@oldboy scripts]# cat judge_int.sh
#! /bin/sh
while true
do
    read   -p "Pls input:" a
    expr $a + 0 ＞/dev/null 2＞&1
    [ $? -eq 0 ] && echo int || echo chars   #"$?"若上一条命令执行成功则返回0否则非0
done

执行结果如下：

[root@oldboy scripts]# sh judge_int.sh
Pls input:oldgirl
chars
Pls input:120
int
Pls input:

================================================================================================================

##范例5-18：将前文的混合运算小程序改成输入两个参数后进行计算的程序，并且要能判断传参的个数及通过expr判断传入的参数是否为整数。

待使用的脚本如下：
[root@oldboy scripts]# cat test.sh
#! /bin/bash
a=6    #＜==在脚本中定义a和b两个变量并分别赋值。
b=2
echo "a-b=$(($a-$b))"  #＜==对定义的变量值进行四则运算，并通过表达式的形式输出，下同。
echo "a+b=$(($a+$b))"
echo "a＊b=$(($a＊$b))"
echo "a/b=$(($a/$b))"
echo "a＊＊b=$(($a＊＊$b))"
echo "a%b=$(($a%$b))"

这道题可以使用游戏过关的思想来编程解决。
编程思路：
第一关，判断参数个数是否为2，若不是，则给出提示终止运行。
第二关，判断传入的参数是否为整数，若不是，则给出提示终止运行。
第三关，做运算。

####参考答案1：

[root@oldboy scripts]# cat 05_18_1.sh
#! /bin/bash
#no.1
[ $# -ne 2 ] &&{                      #＜==对传入参数的个数进行判断，是否等于2。
    echo $"USAGE $0 NUM1 NUM2"        #＜==若不满足条件，则打印提示。
    exit 1                            #＜==以返回值1退出脚本，表示脚本执行错误。
}
#no.2
a=$1                                  #＜==获取脚本传参的$1并赋值给a。
b=$2                                  #＜==获取脚本传参的$2并赋值给b。
expr $a + $b + 110 &＞/dev/null       #＜==将两个参数一起和110相加。
if [ $? -ne 0 ] #＜==如果返回值不为0，则至少有一个不是整数。
  then
    echo "you must input two nums." #＜==打印提示。
    exit 2    #＜==以返回值2退出脚本，表示脚本执行错误，为什么不用1呢，这里是为了区分前
                  面的1，便于调试。
fi
#no.3
echo "a-b=$(($a-$b))"
echo "a+b=$(($a+$b))"
echo "a＊b=$(($a＊$b))"
echo "a/b=$(($a/$b))"
echo "a＊＊b=$(($a＊＊$b))"
echo "a%b=$(($a%$b))"

####执行结果如下：

[root@oldboy scripts]# sh 05_18_1.sh
USAGE 05_14_size.sh NUM1 NUM2
[root@oldboy scripts]# sh 05_18_1.sh 8 2
a-b=6
a+b=10
a＊b=16
a/b=4
a＊＊b=64
a%b=0


####参考答案2：
[root@oldboy scripts]# cat 05_18_2.sh
#! /bin/bash
#no.1
[ $# -ne 2 ] &&{
    echo $"USAGE $0 NUM1 NUM2"
    exit 1
}
#no.2
a=$1
b=$2
expr $a + 1 &＞/dev/null                        #＜==将第一个变量和整数相加。
RETVAL_A=$?                                     #＜==获取返回值。
expr $b + 1 &＞/dev/null                        #＜==将第二个变量和整数相加。
RETVAL_B=$?                                    #＜==获取返回值。
if [ $RETVAL_A -ne 0 -o $RETVAL_B -ne 0 ]      #＜==对两个变量通过expr加和过的返回值进行判断。
  then
    echo "you must input two nums."
    exit 2
fi
#no.3
echo "a-b=$(($a-$b))"
echo "a+b=$(($a+$b))"
echo "a＊b=$(($a＊$b))"
echo "a/b=$(($a/$b))"
echo "a＊＊b=$(($a＊＊$b))"
echo "a%b=$(($a%$b))"
此外，用expr match功能进行整数判断时，可执行man expr命令获得帮助，如下：
[root@oldboy scripts]# cat t1.sh
if [[ `expr match "$1" "[0-9][0-9]＊$"` == 0 ]]
  then
    echo "$1 is not a num"
else
    echo "$1 is a num"
fi

####测试结果如下：
[root@oldboy scripts]# sh t1.sh 11
11 is a num

[root@oldboy scripts]# sh t1.sh oldboy
oldboy is not a num

[root@oldboy scripts]# sh t1.sh 31333741@qq.com
31333741@qq.com is not a num

================================================================================================================

##范例5-19：通过expr判断文件扩展名是否符合要求

[root@oldboy scripts]# cat expr1.sh
#! /bin/sh
if expr "$1" : ".＊\.pub" &＞/dev/null
  then
    echo "you are using $1"
else
    echo "pls use ＊.pub file"
fi

[root@oldboy scripts]# sh expr1.sh id_dsa.pub
you are using id_dsa.pub

[root@oldboy scripts]# sh expr1.sh id_dsa
pls use ＊.pub file

================================================================================================================

##范例5-20：使用expr命令实现系统ssh服务自带的ssh-copy-id公钥分发脚本

[root@oldboy scripts]# sed -n '10,20p' `which ssh-copy-id`
if [ "-i" = "$1" ]; then
  shift
  # check if we have 2 parameters left, if so the first is the new ID file
  if [ -n "$2" ]; then
    if expr "$1" : ".＊\.pub" ＞ /dev/null ; then #＜==判断脚本传入的$1是否符合.pub扩展名。
#  man expr结果。
# STRING : REGEXP
# anchored pattern match of REGEXP in STRING
      ID_FILE="$1"
    else
      ID_FILE="$1.pub"    #＜==如果扩展名不符合要求，则自动加上扩展名，以防止用户发送私钥。
    fi
    shift                 # and this should leave $1 as the target name
  fi

================================================================================================================

##范例5-21：利用expr计算字符串的长度

[root@oldboy scripts]# char="I am oldboy"

[root@oldboy scripts]# expr length "$char"  #＜==利用expr的length函数计算字符串长度。
11
[root@oldboy scripts]# echo ${#char}        #＜==计算变量子串长度的方法。
11

[root@oldboy scripts]# echo ${char}|wc -L    #＜==wc方法
11

[root@oldboy scripts]# echo ${char}|awk '{print length($0)}' #＜==利用awk的length函数来计算字符串的长度。
11

================================================================================================================

##范例5-22：请编写Shell脚本，打印下面语句中字符数不大于6的单词
I am oldboy linux welcome to our training

[root@oldboy scripts]# cat word_length.sh
for n in I am oldboy linux welcome to our training
do
    if [ `expr length $n` -le 6 ]  #＜==利用expr的length函数计算字符串长度，并输出长度不大于6的字符串。
      then
        echo $n
    fi
done

执行结果如下：
[root@oldboy scripts]# sh word_length.sh
I
am
oldboy
linux
to
our

================================================================================================================

##范例5-23：将bc作为计算器来应用

[root@oldboy scripts]# bc           #＜==执行bc后，交互式计算。
bc 1.06.95qqe
Copyright 1991-1994, 1997, 1998, 2000, 2004, 2006 Free Software Foundation, Inc.
This is free software with ABSOLUTELY NO WARRANTY.
For details type `warranty'.
1+1                                                        #＜==输入1+1，按回车键计算。
2
3＊3                                                       #＜==输入3+3回车后计算。
9

================================================================================================================

##范例5-24：将bc用在命令行下面，以实现运算功能

[root@oldboy scripts]# echo 3+5|bc
8

[root@oldboy scripts]# echo 3.3+5.5|bc
8.8

[root@oldboy scripts]# echo 8.8-5.5|bc
3.3

[root@oldboy scripts]# echo "scale=2;355/113"|bc   #＜==使用scale=2保留两位小数。
3.14

[root@oldboy scripts]# echo "scale=6;355/113"|bc   #＜==使用scale=6保留6位小数。
3.141592

利用bc配合变量运算：

[root@oldboy scripts]# i=5

[root@oldboy scripts]# i=`echo $i+6|bc`  #＜==利用echo输出表达式，通过管道交给bc计算。此方法效率较低。
[root@oldboy scripts]# echo $i
11

####提示：根据bc所具有的特殊性来看，如果是小数，则选择bc运算没有问题（老男孩推荐awk）；若是整数场景，可用“(())”、let、expr等。

================================================================================================================

##范例5-25：通过一条命令计算输出1+2+3+…+10的表达式，并计算出结果，请使用bc命令计算。输出内容如1+2+3+4+5+6+7+8+9+10=55。

这里生成1+2+3+4+5+6+7+8+9+10表达式的方法有：

[root@oldboy scripts]# seq -s "+" 10    #＜== seq是生成数字序列，-s是指定数字序列之间的分隔符。
1+2+3+4+5+6+7+8+9+10

[root@oldboy scripts]# echo {1..10}|tr " " "+"  #＜=={1..10}是生成以空格为间隔的数字序列，并交给tr将空格替换为+号。
1+2+3+4+5+6+7+8+9+10

实现本题的多种方法如下：
[root@oldboy scripts]# echo `seq -s '+' 10`=`seq -s "+" 10|bc`    #＜==使用bc计算
1+2+3+4+5+6+7+8+9+10=55

[root@oldboy scripts]# echo "`seq -s '+' 10`="$((`seq -s "+" 10`))  #＜==使用“(())”计算
1+2+3+4+5+6+7+8+9+10=55

[root@oldboy scripts]# echo `seq -s '+' 10`=`seq -s " + " 10|xargs expr`  #＜==使用expr计算
1+2+3+4+5+6+7+8+9+10=55

[root@oldboy scripts]# echo `seq -s "+" 10`=$(echo $[`seq -s "+" 10`])    #＜==使用$[]计算
1+2+3+4+5+6+7+8+9+10=55

####bc命令的独有特点是除了支持整数运算之外，还支持小数运算。

================================================================================================================

##awk实现计算

shiyufeng:Techonology shiyufeng$ echo "7.7 3.8" |awk '{print ($1-$2)}'
3.9

shiyufeng:Techonology shiyufeng$ echo "358 113" |awk '{print ($1-3)/$2}'
3.14159

shiyufeng:Techonology shiyufeng$ echo "3 9" |awk '{print ($1+3)*$2}'
54

shiyufeng:Techonology shiyufeng$

================================================================================================================

##delare（同typeset）命令的用法

typeset定义整数变量，直接进行计算。--此方法不常用，需要定义才能生效

shiyufeng:Techonology shiyufeng$ declare -i A=30 B=7  # declare -i 参数可以将变量定义为整形

shiyufeng:Techonology shiyufeng$ A=A+B    #因为已声明是整型，因此可直接进行运算

shiyufeng:Techonology shiyufeng$ echo $A
37

================================================================================================================

##关于$[]符号运算的示例如下

[root@oldboy scripts]# i=5

[root@oldboy scripts]# i=$[i+6]

[root@oldboy scripts]# echo $i
11

[root@oldboy scripts]# echo $[2＊3]
6

[root@oldboy scripts]# echo $[2＊＊3]
8

[root@oldboy scripts]# echo $[3/5]
0

[root@oldboy scripts]# echo $[3/2]
1

[root@oldboy scripts]# echo $[3%5]
3

[root@oldboy scripts]# echo $[ 3 % 5 ]
3

================================================================================================================

##下面是一个解决实际问题的示例：打印数学杨辉三角。

#! /bin/bash
if (test -z $1) ; then      #＜==判断传参的值长度是不是为0，如果没有传入参数，则使用read读入。
    read -p "Input Max Lines:" MAX  #＜==read读入一个数值。
else
    MAX=$1                  #＜==如果已经传参了，就把传参的$1赋值给MAX。
fi                          #＜==上述脚本很巧妙地通过判断，实现了用户既可以传参输入，也可以read读入数字。
i=1
while [ $i -le $MAX ]       #＜==i行控制。
do
    j=1
    while [ $j -le $i ]     #＜==j列控制。
    do
        f=$[i-1]            #＜==f=i-1是$[]计算写法。
        g=$[j-1]            #＜==g=j-1是$[]计算写法。
        if [ $j -eq $i ] || [ $j -eq 1 ] ; then
            declare SUM_${i}_$j=1                     #＜==声明变量头尾都是1。
        else
            declare A=$[SUM_${f}_$j]                  #＜==取上一行的j列变量。
            declare B=$[SUM_${f}_$g]                  #＜==取上一行的j-1列变量。
            declare SUM_${i}_$j=`expr $A + $B` #＜==声明并计算当前变量的值。
        fi
        echo -en $[SUM_${i}_$j]" "                    #＜==输出当前变量。
        let j++                                       #＜==let运算用法。
    done
    echo                                              #＜==换行。
    let i++                                           #＜==let运算用法。
done

================================================================================================================


================================================================================================================


================================================================================================================


================================================================================================================


================================================================================================================


================================================================================================================


================================================================================================================


================================================================================================================


================================================================================================================


================================================================================================================