[root@node2 k8s]# kubeadm join 192.168.1.31:6443 --token kumyz7.b1mc0gdqpeyoeqsw --discovery-token-ca-cert-hash sha256:1023eb20d89a6777141356e32003d23932d0077e91756f35d5690f714736792e \
>       --ignore-preflight-errors=Swap
[preflight] Running pre-flight checks
[discovery] Trying to connect to API Server "192.168.1.31:6443"
[discovery] Created cluster-info discovery client, requesting info from "https://192.168.1.31:6443"
[discovery] Requesting info from "https://192.168.1.31:6443" again to validate TLS against the pinned public key
[discovery] Cluster info signature and contents are valid and TLS certificate validates against pinned roots, will use API Server "192.168.1.31:6443"
[discovery] Successfully established connection with API Server "192.168.1.31:6443"
[join] Reading configuration from the cluster...
[join] FYI: You can look at this config file with 'kubectl -n kube-system get cm kubeadm-config -oyaml'
[kubelet] Downloading configuration for the kubelet from the "kubelet-config-1.13" ConfigMap in the kube-system namespace
[kubelet-start] Writing kubelet configuration to file "/var/lib/kubelet/config.yaml"
[kubelet-start] Writing kubelet environment file with flags to file "/var/lib/kubelet/kubeadm-flags.env"
[kubelet-start] Activating the kubelet service
[tlsbootstrap] Waiting for the kubelet to perform the TLS Bootstrap...
[patchnode] Uploading the CRI Socket information "/var/run/dockershim.sock" to the Node API object "node2" as an annotation

This node has joined the cluster:
* Certificate signing request was sent to apiserver and a response was received.
* The Kubelet was informed of the new secure connection details.

Run 'kubectl get nodes' on the master to see this node join the cluster.