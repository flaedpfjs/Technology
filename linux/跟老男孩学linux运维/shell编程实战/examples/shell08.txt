## 范例6-1：在test命令中使用-f选项（文件存在且为普通文件则表达式成立）测试文件

[root@oldboy ～]# test -f file && echo true || echo false  #＜==如果file文件存在并且是普通文件就为真，因为file文件不存在，所以输出了false。
false

[root@oldboy ～]# touch file        #＜==现在创建不存在的普通文件file。

[root@oldboy ～]# test -f file && echo true || echo false   #＜==因为file文件存在，所以输出了true。
true

================================================================================================================

## 范例6-2：在test命令中使用-z选项（如果测试字符串的长度为0，则表达式成立）测试字符串

[root@oldboy ～]# test -z "oldboy" && echo 1 || echo 0   #＜==如果测试字符串的长度为0，则表达式成立，因为被测试的字符串为oldboy，不为0，表达式结果为假，因此返回0。
0

[root@oldboy ～]# char="oldboy"     #＜==将oldboy字符串赋值给变量char。

[root@oldboy ～]# test -z "$char" && echo 1 || echo 0 #＜==对变量char进行测试，注意要带$。
0

[root@oldboy ～]# char=""        #＜==将空值赋值给变量char。

[root@oldboy ～]# test -z "$char" && echo 1 || echo 0   #＜==如果测试字符串的长度为0，则表达式成立，因为被测试的字符串为空，因此表达式的结果为真，返回1。
1

####提示：关于test测试表达式的更多知识可执行man test查看帮助，本书大部分场景都会使用[]的语法替代test命令的语法。

================================================================================================================

###范例6-3：利用[]加-f选项（文件存在且为普通文件则表达式成立）测试文件

[root@oldboy ～]# [ -f /tmp/oldboy.txt ] && echo 1 || echo 0   #＜==如果/tmp/oldboy.txt文件存在并且是普通文件则为真，因为该文件不存在，所以输出了0。
0

[root@oldboy ～]# touch /tmp/oldboy.txt       #＜==创建文件。

[root@oldboy ～]# [ -f /tmp/oldboy.txt ] && echo 1 || echo 0
1      #＜==因为文件存在，所以输出1。

[root@oldboy ～]# [ -f /tmp/oldboy.txt ] && echo 1  #＜==可以只写前一半（即只有&&部分），如果文件存在则输出1。
1

[root@oldboy ～]# [ -f /tmp/oldboy.txt ] || echo 0   #＜==可以只写后一半（即只有||部分），如果文件不存在则输出0，因为文件存在，所以没有输出。

[root@oldboy ～]# [ -f /tmp/oldgirl.txt ] || echo 0  #＜==如果文件不存在，则输出0，因为oldgirl.txt不存在，所以输出了0。
0

================================================================================================================

## 范例6-4:[[]]的使用示例

[root@oldboy ～]# [[ -f /tmp/oldgirl.txt ]] || echo 0    #＜==如果/tmp/oldgirl.txt文件存在并且是普通文件，则为真，因为文件不存在，所以输出了0。
0
[root@oldboy ～]# touch /tmp/oldgirl.txt     #＜==创建oldgirl.txt，注意/tmp目录。

[root@oldboy ～]# [[ -f /tmp/oldgirl.txt ]] || echo 0 #＜==因为文件存在了，所以后半部分没有输出。

[root@oldboy ～]# [[ -f /tmp/oldboy.txt ]] || echo 0 #＜==因为存在/tmp/oldboy.txt，所以后半部分没有输出。

[root@oldboy ～]# rm -f /tmp/oldboy.txt              #＜==删除oldboy.txt文件。

[root@oldboy ～]# [[ -f /tmp/oldboy.txt ]] || echo 0 #＜==因为文件不存在了，所以输出0。
0

================================================================================================================

##范例6-5：普通文件条件表达式测试实践

[root@oldboy ～]# touch oldboy  #＜==创建文件oldboy。

[root@oldboy ～]# ls -l oldboy
-rw-r--r-- 1 root root 0 Aug   9 22:40 oldboy

[root@oldboy ～]# [ -f oldboy ] && echo 1 || echo 0 #＜==测试文件是否存在，如果存在，则输出1，否则输出0
1  #＜==因为刚刚创建了oldboy文件，因此条件测试表达式成立，输出1。

================================================================================================================

## 范例6-6：目录文件条件表达式测试实践

[root@oldboy ～]# mkdir oldgirl  #＜==创建目录oldgirl。

[root@oldboy ～]# [ -f oldgirl ] && echo 1 || echo 0      #＜==测试oldgirl是否为普通文件。
0      #＜==输出为0，证明oldgirl非普通文件，因为前面创建的是oldgirl目录，因此，输出0是对的。

[root@oldboy ～]# [ -e oldgirl ] && echo 1 || echo 0    #＜==测试oldgirl是否存在。
1  #＜==只要oldgirl存在就行，不管是目录还是普通文件，oldgirl确实存在，因此输出1。

[root@oldboy ～]# [ -d oldgirl ] && echo 1 || echo 0 #＜==测试oldgirl是否为目录。
1  #＜==输出1，证明oldgirl是目录。

[root@oldboy ～]# [ -d oldboy ] && echo 1 || echo 0 #＜==测试oldboy是否为目录。
0  #＜==输出0，证明oldboy非目录

================================================================================================================

##范例6-7：文件属性条件表达式测试实践
[root@oldboy ～]# ls -l oldboy
-rw-r--r-- 1 root root 0 Aug   9 22:40 oldboy  #＜==文件权限默认为644，权限基础可参考老男孩基础类图书或视频讲解。

[root@oldboy ～]# [ -r oldboy ] && echo 1 || echo 0  #＜==测试oldboy是否可读。
1    #＜==输出为1，因为用户权限位有r，因此，可以读取oldboy。

[root@oldboy ～]# [ -w oldboy ] && echo 1 || echo 0  #＜==测试oldboy是否可写。
1  #＜==输出为1，因为用户权限位有w，因此，可以写入oldboy。

[root@oldboy ～]# [ -x oldboy ] && echo 1 || echo 0  #＜==测试oldboy是否可执行。
0  #＜==输出为0，因为用户权限位没有x，因此，不可以执行oldboy。

[root@oldboy ～]# chmod 001 oldboy  #＜==修改oldboy的权限位001。

[root@oldboy ～]# ls -l oldboy
---------x 1 root root 0 Aug  9 22:40 oldboy #＜==修改后的结果。

[root@oldboy ～]# [ -w oldboy ] && echo 1 || echo 0
1  #＜==用户权限位明明没有w，为什么还是返回1呢？

[root@oldboy ～]# echo 'echo test' ＞oldboy  #＜==因为确实可以写啊，这是root用户比较特殊的地方。

[root@oldboy ～]# [ -r oldboy ] && echo 1 || echo 0
1  #＜==用户权限位明明没有r，为什么还是返回1呢？

[root@oldboy ～]# cat oldboy
echo test  #＜==因为确实可以读啊，这是root用户比较特殊的地方。

[root@oldboy ～]# [ -x oldboy ] && echo 1 || echo 0
1

[root@oldboy ～]# ./oldboy    #＜==可执行。
test

####提示：测试文件的读、写、执行等属性，不光是根据文件属性rwx的标识来判断，还要看当前执行测试的用户是否真的可以按照对应的权限操作该文件。

================================================================================================================



================================================================================================================



================================================================================================================




================================================================================================================



================================================================================================================



================================================================================================================



================================================================================================================




================================================================================================================



================================================================================================================



================================================================================================================



================================================================================================================



================================================================================================================



================================================================================================================



================================================================================================================
