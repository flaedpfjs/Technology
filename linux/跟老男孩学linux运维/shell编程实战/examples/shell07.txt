
##范例5-1:利用(())进行简单数值计算

shiyufeng:examples shiyufeng$ echo $((1+1))  #计算1+1后输出
2

shiyufeng:examples shiyufeng$ echo $((6-3))  #计算6-3后输出
3

shiyufeng:examples shiyufeng$ ((i=5))
shiyufeng:examples shiyufeng$ ((i=i*2))   #获取i值，然后计算i*2，再赋值给i，此时没有输出
shiyufeng:examples shiyufeng$ echo $i     #输出时用echo,而且要加$
10

================================================================================================================

##范例5-2：利用“(())”进行稍微复杂一些的综合算术运算。＊＊表示幂运算

[root@oldboy ～]# ((a=1+2＊＊3-4%3)) #＜==这是一个较复杂的表达式运算并赋值的操作，表达式运算后将结果赋值给a，先乘除后加减。

[root@oldboy ～]# echo $a
8      #＜==运算后输出结果为8。

[root@oldboy ～]# b=$((1+2＊＊3-4%3))    #＜==这是另外一种表达式运算后将结果赋值给变量的写法，变量放在了括号的外面。

[root@oldboy ～]# echo $b
8

[root@oldboy ～]# echo $((1+2＊＊3-4%3))  #＜==还可以直接运算表达式并将结果输出，注意不要落下了$符。
8

[root@oldboy ～]# a=$((100＊(100+1)/2))   #＜==利用公式计算1+2+3+...+100的和。

[root@oldboy ～]# echo $a
5050

[root@oldboy ～]# echo $((100＊(100+1)/2))   #＜==直接输出表达式的结果。
5050

================================================================================================================

##范例5-3：特殊运算符号的运算小示例。

[root@oldboy ～]# a=8

[root@oldboy ～]# echo $((a=a+1)) #＜==将a+1赋值给a，然后输出表达式的值。
9

[root@oldboy ～]# echo $((a+=1))    #＜==相当于a=a+1。
10

[root@oldboy ～]# echo $((a＊＊2))  #＜==计算a的平方，＊＊表示幂运算。
100

================================================================================================================

##范例5-4：利用“(())”双括号进行比较及判断。

[root@oldboy ～]# echo $((3＜8))      #＜==3＜8的结果是成立的，因此，输出了1,1表示真。
1  #＜==输出1说明上述表达式的结果是对的。

[root@oldboy ～]# echo $((8＜3))      #＜==8＜3的结果是不成立的，因此，输出了0,0表示假。
0  #＜==输出0说明上述表达式的结果是错的。

[root@oldboy ～]# echo $((8==8))     #＜==判断是否相等。
1

[root@oldboy ～]# if ((8＞7&&5==5))  #＜==如果8＞7成立并且5==5成立，则打印yes。显然这两个条件都成立。
＞ then                               #＜==这是一个简单的命令行if语句格式。
＞ echo yes
＞ fi
yes                                   #＜==因此结果输出了yes。

####提示：上面涉及的数字及变量必须为整数（整型），不能是小数（浮点数）或字符串。后面的bc和awk命令可以用于进行小数（浮点数）运算，但一般用到的较少，下文对此还会讲解。

================================================================================================================

##范例5-5：在变量前后使用--和++特殊运算符的表达式。

[root@oldboy ～]# a=10

[root@oldboy ～]# echo $((a++))   #＜== 如果a在运算符(++或--)的前面，那么在输出整个表达式时，会输出a的值，因为a为10，所以表达式的值为10。
10

[root@oldboy ～]# echo $a    #＜==执行上面的表达式后，因为有a++，因此a会自增1，因此输出a的值为11。
11

[root@oldboy ～]# a=11

[root@oldboy ～]# echo $((a--))   ＜== 如果a在运算符(++或--)的前面，那么在输出整个表达式时，会输出a的值，因为a为11，所以表达式的值的为11。
11

[root@oldboy ～]# echo $a      #＜==执行上面的表达式后，因为有a--，因此a会自动减1，因此a为10。
10

[root@oldboy ～]# a=10

[root@oldboy ～]# echo $a
10

[root@oldboy ～]# echo $((--a))   #＜== 如果a在运算符(++或--)的后面，那么在输出整个表达式时，先进行自增或自减计算，因为a为10，且要自减，所以表达式的值为9。
9

[root@oldboy ～]# echo $a     #＜==执行上面的表达式后，a自减1，因此a为9。
9

[root@oldboy ～]# echo $((++a))  #＜== 如果a在运算符(++或--)的后面，输出整个表达式时，先进行自增或自减计算，因为a为9，且要自增1，所以输出10。
10

[root@oldboy ～]# echo $a   #＜==执行上面的表达式后，a自增1，因此a为10。
10

说明：

执行echo $((a++))和echo $((a--))命令输出整个表达式时，输出的值即为a的值，表达式执行完毕后，会对a进行++、--的运算，
而执行echo $((++a))和echo $((--a))命令输出整个表达式时，会先对a进行++、--的运算，然后再输出表达式的值，即为a运算后的值。

提示：有关++、--运算的记忆方法：

变量a在运算符之前，输出表达式的值为a，然后a自增或自减；变量a在运算符之后，输出表达式会先自增或自减，表达式的值就是自增或自减后a的值。
如果实在理解不了这里的++和--，跳过就可以了，不会影响读者学好Linux运维，在工作中，使用它们前先测试好结果即可

================================================================================================================

##范例5-6：通过“(())”运算后赋值给变量。

[root@oldboy ～]# myvar=99

[root@oldboy ～]# echo $((myvar+1))          #＜==“(())”中的变量myvar前也可以加$符号，也可以不加。
100

[root@oldboy ～]# echo $((  myvar + 1  ))    #＜==“(())”内部内容的两端有几个空格无所谓，变量和运算符号之间有无空格也无所谓，可以有一个或多个，也可以没有。
100

[root@oldboy ～]# myvar=$((myvar+1))         #＜==还可以在“(())”表达式前加$符号，表达式赋值给变量。

[root@oldboy ～]# echo $myvar
100

####提示：在“(())”中使用变量时可以去掉变量前的$符号。

================================================================================================================

##范例5-7：包含“(())”的各种常见运算符命令行的执行示例。

[root@oldboy ～]# echo $((6+2))   #＜==加法
8

[root@oldboy ～]# echo $((6-2))   #＜==减法
4

[root@oldboy ～]# echo $((6＊2))  #＜==乘法
12

[root@oldboy ～]# echo $((6/2))   #＜==除法，取商数
3

[root@oldboy ～]# echo $((6%2))   #＜==取模，即余数
0

[root@oldboy ～]# echo $((6＊＊2)) #＜==幂运算(6的2次方)
36

####提示：
“(())”表达式在命令行执行时不需要加$符号，直接使用((6%2))形式即可，但是如果需要输出，就要加$符，例如：echo $((6%2))。
“(())”里的所有字符之间没有空格、有一个或多个空格都不会影响结果。
================================================================================================================

##范例5-8：各种“(())”运算的Shell脚本示例。

[root@oldboy scripts]# cat test.sh
#! /bin/bash
a=6                        #＜==在脚本中定义a和b两个变量并分别赋值。
b=2
echo "a-b=$(($a-$b))"      #＜==对定义的变量值进行各种符号运算，并通过表达式的形式输出，下同。
echo "a+b=$(($a+$b))"
echo "a＊b=$(($a＊$b))"
echo "a/b=$(($a/$b))"
echo "a＊＊b=$(($a＊＊$b))"
echo "a%b=$(($a%$b))"

##建议读者手动输入一遍这个脚本，并执行看看结果。这个例子很重要，后文经常会使用到，可保留起来备用。
##其执行结果如下:

[root@oldboy scripts]# sh test.sh
a-b=4
a+b=8
a＊b=12
a/b=3
a＊＊b=36
a%b=0

================================================================================================================

##范例5-9：把范例5-8脚本中的a、b两个变量通过命令行脚本传参，以实现混合运算脚本的功能。
##这是一个考察实战编程思想的综合实践考试题，将涉及前面提到的特殊位置参数变量的知识。

####参考答案1：

[root@oldboy scripts]# cat test.sh
#! /bin/bash
a=$1    #＜==直接把特殊位置参数变量$1赋值给a，
b=$2    #＜==并且把特殊位置参数变量$2赋值给b，这样，脚本传参的内容就会赋值给a和b。
echo "a-b=$(($a-$b))"
echo "a+b=$(($a+$b))"
echo "a＊b=$(($a＊$b))"
echo "a/b=$(($a/$b))"
echo "a＊＊b=$(($a＊＊$b))"
echo "a%b=$(($a%$b))"

执行结果如下：
[root@oldboy scripts]# sh test.sh 6 2
a-b=4
a+b=8
a＊b=12
a/b=3
a＊＊b=36
a%b=0

[root@oldboy scripts]# sh test.sh 10 5
a-b=5
a+b=15
a＊b=50
a/b=2
a＊＊b=100000
a%b=0

####使用脚本传参的好处是可以进行各种数字间的运算，不像前一个脚本，因为是直接定义变量的，所以只能做6和2这两个数字的运算，
也就是说，使用传参，可以让脚本更具备通用性。

####参考答案2：
#! /bin/bash
echo "a-b =$(( $1 - $2 ))"
echo "a+b =$(( $1 + $2 ))"
echo "a＊b =$(( $1 ＊ $2 ))"
echo "a/b =$(( $1 / $2 ))"
echo "a＊＊b =$(( $1 ＊＊ $2 ))"
echo "a%b =$(( $1 % $2 ))"
================================================================================================================

##范例5-10：实现输入2个数进行加、减、乘、除功能的计算器。

参考答案1：本解答方案利用了read命令的读入功能，并对读入的内容是否为整数，传入的符号是否符合加、减、乘、除之一做了判断。
#! /bin/bash
print_usage(){                                #＜==定义一个函数，名字为print_usage。
    printf "Please enter an integer\n"        #＜==打印符合脚本要求的提示信息。
    exit 1   #＜==以返回值1退出脚本，这个在前面讲特殊进程变量时已经讲过这个返回值的用法了。
}
read -p "Please input first number: " firstnum   #＜==读入第一个数字，本章后文将讲解read。
if [ -n "`echo $firstnum|sed 's/[0-9]//g'`" ]; then  #＜==判断是否为整数，删除读入内容的数字部分看是否为空（-n功能），进而判断读入的内容是否为数字。
    print_usage       #＜==如果上述条件变量值不为空，说明不是整数，则调用用户帮助函数。
fi
read -p "Please input the operators: " operators       #＜==继续读入运算符。
if [ "${operators}" ! = "+" ]&&[ "${operators}" ! = "-" ] && [ "${operators}"
!= "＊" ] && [ "${operators}" ! = "/" ]; then #＜==判断第二个输入内容操作符是否为+-＊/任意运算符之一。
    echo "please use {+|-|＊|/}"         #＜==如果操作符不符合要求，则给出提示。
    exit 2      #＜==因为不符合要求，因此以返回值2退出脚本，表示出现错误了。
fi
read -p "Please input second number: " secondnum      #＜==读入第二个要运算的数字。
if [ -n "`echo $secondnum|sed 's/[0-9]//g'`" ]; then  #＜==同第一个运算的数字，判断是否为整数。
        print_usage #＜==如果上述条件变量值不为空，说明不是整数，则调用用户帮助函数。
    fi
    echo "${firstnum}${operators}${secondnum}=$((${firstnum}${operators}${secondnum}))" #＜==上述条件都符合后，进入运算，输出运算表达式和计算结果。

执行结果如下：
[root@oldboy scripts]# sh 05_10_jisuan.sh
Please input first number: 6    #＜==输入数字6。
Please input the operators: -   #＜==输入运算符号减号。
Please input second number: 2   #＜==输入数字2。
6-2=4

[root@oldboy scripts]# sh 05_10_jisuan.sh
Please input first number: 6
Please input the operators: ＊
Please input second number: 3
6＊3=18

[root@oldboy scripts]# sh 05_10_jisuan.sh
Please input first number: oldboy #＜==当输入非数字时，系统就会提示“请输入数字”，并终止程序运行。
Please enter an integer            #＜==提示“请输入数字”。
[root@oldboy scripts]# sh 05_10_jisuan.sh
Please input first number: 10
Please input the operators: ^      #＜==运算符号不符合+-＊/之一时，也会提示，并终止程序运行。
please use {+|-|＊|/}

##参考答案2：本解答方案利用了脚本命令行传参的功能，并对传参的内容是否为整数，传入的符号是否符合加、减、乘、除之一做了判断。

[root@oldboy scripts]# cat 05_11_jisuan.sh
#! /bin/bash
print_usage(){
    printf $"USAGE:$0 NUM1 {+|-|＊|/} NUM2\n"
    exit 1
}
if [ $# -ne 3 ] #＜==如果脚本传入的参数个数不等于3个（因为要输入两个数字及一个运算符号）。
  then
    print_usage #＜==则调用用户帮助函数。
fi
firstnum=$1  #＜==第一个数字，为了减小对原脚本的改动，这里将$1赋值给firstnum，下同。
secondnum=$3
op=$2
if [ -n "`echo $firstnum|sed 's/[0-9]//g'`" ]; then   #＜==是否为整数的判断，同上。
    print_usage
fi
if [ "$op" ! = "+" ]&&[ "$op" ! = "-" ]&&[ "$op" ! = "＊" ]&&[ "$op" ! = "/" ]
  #＜==判断第二个输入的操作符是否为+、-、＊、/任意运算符之一。
  then
    print_usage
fi
if [ -n "`echo $secondnum|sed 's/[0-9]//g'`" ]; then  #＜==是否为整数的判断，同上。
    print_usage
fi
echo "${firstnum}${op}${secondnum}=$((${firstnum}${op}${secondnum}))"

执行结果如下：
[root@oldboy scripts]# sh 05_11_jisuan.sh 6 + 2
6+2=8
[root@oldboy scripts]# sh 05_11_jisuan.sh 6 - 2
6-2=4
[root@oldboy scripts]# sh 05_11_jisuan.sh 6 \＊ 2    #＜==＊号要转义。
6＊2=12
[root@oldboy scripts]# sh 05_11_jisuan.sh 6 / 2
6/2=3
[root@oldboy scripts]# sh 05_11_jisuan.sh old / 2    #＜==若输入的参数不符合要求，则给予提示。
USAGE:05_11_jisuan.sh NUM1 {+|-|＊|/} NUM2

[root@oldboy scripts]# sh 05_11_jisuan.sh 6 / girl  #＜==若输入的参数不符合要求，则给予提示。
USAGE:05_11_jisuan.sh NUM1 {+|-|＊|/} NUM2


##参考答案3：此为高效、简单的方法，只用一个$1进行计算，传参时传一个表达式就可以了。
[root@oldboy scripts]# cat jisuan1.sh
echo $(($1))
[root@oldboy scripts]# sh jisuan1.sh 6+2
8
[root@oldboy scripts]# sh jisuan1.sh "6 + 2"  #＜==如果有空格，则要加双引号。
8
####提示：本脚本没有对输入的参数做判断。
================================================================================================================


================================================================================================================


================================================================================================================


================================================================================================================


================================================================================================================


================================================================================================================

================================================================================================================