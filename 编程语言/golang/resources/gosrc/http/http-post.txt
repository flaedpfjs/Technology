###  post请求 golang<->java 传递&接收json格式数据  ###
=======================================================================================

「项目应用」golang->java(传递json数据) | java->golang(返回json数据)

type ResultCfca struct {
	Code int          `json:"code"`
	Msg  string       `json:"msg"`
	Data CfcaInfo `json:"data"`
}

type CfcaInfo struct{
    xx string `db:"xx" josn:"xx"`
    ......
}

func callJava(javaParam EnrollCfca) ResultCfca {
	logger.Debugf("javaApplyCertUrl:%s", javaApplyCertUrl)
	url := javaApplyCertUrl
	logger.Debugf("url:%s", url)
	contentType := "application/json;charset=utf-8"
	javaJsonParam, errs := json.Marshal(javaParam) //转换成JSON返回的是byte[]
	if errs != nil {
		logger.Error(errs.Error())
	}

	logger.Debug("调用java传递参数:", string(javaJsonParam))

	//发送请求
	req, err := http.NewRequest("POST", url, strings.NewReader(string(javaJsonParam)))
	if err != nil {
		//panic(err)
		logger.Errorf("获取连接失败:%s", err.Error())
	}
	req.Header.Set("Content-Type", contentType)
	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		//panic(err)
		logger.Errorf("发送请求失败:%s", err.Error())
	}
	defer resp.Body.Close()
	//响应
	response, err := ioutil.ReadAll(resp.Body)
	logger.Debug("返回响应:" + string(response))
	if err != nil {
		logger.Debug("Read failed:", err)
		logger.Error("读取响应失败:", err)
		return ResultCfca{}
	}
	logger.Debug("response:", string(response))
	logger.Debug("响应结果:", string(response))

	//返回结果
	resultcfca := ResultCfca{}
	json.Unmarshal([]byte(string(response)), &resultcfca) //json解析到结构体里面
	logger.Debug("resultcfca", resultcfca)                //输入结构体
	logger.Debug("code", resultcfca.Code)
	return resultcfca
}
=======================================================================================
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

「项目应用」:参照(https://www.cnblogs.com/hitfire/articles/6427033.html)

其中x509错误可参照(https://studygolang.com/articles/12217)

func Getnamespace(ctx *gin.Context){

	logs.Info("调用获取命名空间接口start####")

	//获取参数network
	netname:=ctx.DefaultQuery("network","")

	logs.Info("请求参数network=",netname)

	//获取请求地址
	var url,method string

	logs.Info("读取配置文件请求地址###","url:",viper.GetString("http.rtmc"),",method:",viper.GetString("rtmc.getNetworkNamespaces"))

	url=viper.GetString("http.rtmc")

	if url == ""{
		url="http://xx.xx.com"
	}

	method=viper.GetString("rtmc.getNetworkNamespaces")

	if method == "" {
		method="/v1/monitor/getNetworkNamespaces"
	}

	rtmcUrl:=url+method

	logs.Info("rtmc请求URL###",rtmcUrl)

	//调用传参数获取数据

	var param map[string] interface{}

	param=make(map[string]interface{})

	param["network"]=netname

	jsonParam,err:=json.Marshal(param)

	if err !=nil {
		logs.Error("json格式化数据错误",err)
	}

	logs.Info("传递请求参数###",string(jsonParam))

	tr := &http.Transport{
		TLSClientConfig:&tls.Config{InsecureSkipVerify: true},
	}

	client := &http.Client{Transport: tr}  //处理报x509证书错误

	req, err := http.NewRequest("POST", rtmcUrl, bytes.NewReader(jsonParam))

	if err != nil {
		logs.Error("向rtmc发送http连接发生错误###",err)
	}
	req.Header.Set("Content-Type", "application/json;charset=UTF-8")

	resp, err := client.Do(req)

	if err != nil {
		logs.Info("发送请求失败###",err)
	}

	//响应
	response, err := ioutil.ReadAll(resp.Body)

	logs.Info("返回结果###",string(response))

	logs.Info("调用获取命名空间接口end####")

	defer resp.Body.Close()
}